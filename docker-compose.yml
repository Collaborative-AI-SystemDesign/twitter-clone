#ver 07.15
# Docker Compose of mysql service for local development
version: "3.8"

services:
  mysql0:
    image: mysql:8.0
    container_name: mysql0
    ports:
      - "3306:3306"
    volumes:
      - ./db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: sd_root_password
      MYSQL_DATABASE: sd_db
      MYSQL_USER: sd_user
      MYSQL_PASSWORD: sd_password

  mysql1:
    image: mysql:8.0
    container_name: mysql1
    environment:
      MYSQL_ROOT_PASSWORD: sd_root_password
      MYSQL_DATABASE: sd_db
      MYSQL_USER: sd_user
      MYSQL_PASSWORD: sd_password
    ports:
      - "3307:3306"
    volumes:
      - shard1_data:/var/lib/mysql
      - ./mysql_init/shard1.sql:/docker-entrypoint-initdb.d/init.sql:ro

  mysql2:
    image: mysql:8.0
    container_name: mysql2
    environment:
      MYSQL_ROOT_PASSWORD: sd_root_password
      MYSQL_DATABASE: sd_db
      MYSQL_USER: sd_user
      MYSQL_PASSWORD: sd_password
    ports:
      - "3308:3306"
    volumes:
      - shard2_data:/var/lib/mysql
      - ./mysql_init/shard2.sql:/docker-entrypoint-initdb.d/init.sql:ro

  mysql3:
    image: mysql:8.0
    container_name: mysql3
    environment:
      MYSQL_ROOT_PASSWORD: sd_root_password
      MYSQL_DATABASE: sd_db
      MYSQL_USER: sd_user
      MYSQL_PASSWORD: sd_password
    ports:
      - "3309:3306"
    volumes:
      - shard3_data:/var/lib/mysql
      - ./mysql_init/shard3.sql:/docker-entrypoint-initdb.d/init.sql:ro

  #  mongodb:
  #    image: mongo:latest
  #    container_name: sd_mongodb_container
  #    ports:
  #      - "27017:27017"
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: sd_root
  #      MONGO_INITDB_ROOT_PASSWORD: sd_root_password
  #    volumes:
  #      - mongodb_data:/data/db # 데이터 영속성을 위한 볼륨 마운트


  redis:
    image: redis:latest
    container_name: sd_redis_container
    ports:
      - 6379:6379
    volumes:
      - ./redis:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    command: redis-server /usr/local/conf/redis.conf

  #  minio:
  #    image: minio/minio
  #    container_name: minio
  #    ports:
  #        - "9000:9000" # API 요청을 보낼 때 쓰는 포트 (AmazonS3Client가 여기에 요청함)
  #        - "9001:9001" # 	http://localhost:9001 에서 웹 UI로 버킷 만들거나 파일 업로드 가능
  #    volumes:
  #      - ./minio/data:/data
  #    environment:
  #        MINIO_ROOT_USER: sd_admin # AWS S3의 Access Key / Secret Key와 같은 역할
  #        MINIO_ROOT_PASSWORD: sd_password
  #    command: server /data --console-address ":9001" # 	데이터 저장 경로 설정 및 웹 콘솔 포트 지정

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      #      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ./prometheus/data:/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/data:/data
    depends_on:
      - prometheus

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP 프로토콜 포트
      - "15672:15672" # 웹 UI 포트 (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  # Cassandra 클러스터 (3 노드)
  cassandra-1:
    image: cassandra:4.0
    container_name: cassandra-1
    hostname: cassandra-1
    ports:
      - "9042:9042" # CQL Native Transport Port for Node 1
    environment:
      - CASSANDRA_CLUSTER_NAME=DevCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_SEEDS=cassandra-1,cassandra-2,cassandra-3
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_BROADCAST_ADDRESS=cassandra-1
      - CASSANDRA_LISTEN_ADDRESS=auto
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
      - CASSANDRA_BROADCAST_RPC_ADDRESS=127.0.0.1
      - CASSANDRA_START_NATIVE_TRANSPORT=true
      - CASSANDRA_AUTO_BOOTSTRAP=false
      - HEAP_NEWSIZE=256M
      - MAX_HEAP_SIZE=1G
    volumes:
      - cassandra_data_1:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra --debug -e 'DESCRIBE KEYSPACES;' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - cassandra_network

  cassandra-2:
    image: cassandra:4.0
    container_name: cassandra-2
    hostname: cassandra-2
    ports:
      - "9043:9042" # CQL Native Transport Port for Node 2
    environment:
      - CASSANDRA_CLUSTER_NAME=DevCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack2
      - CASSANDRA_SEEDS=cassandra-1,cassandra-2,cassandra-3
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_BROADCAST_ADDRESS=cassandra-2
      - CASSANDRA_LISTEN_ADDRESS=auto
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
      - CASSANDRA_BROADCAST_RPC_ADDRESS=127.0.0.1
      - CASSANDRA_START_NATIVE_TRANSPORT=true
      - CASSANDRA_AUTO_BOOTSTRAP=false
      - HEAP_NEWSIZE=256M
      - MAX_HEAP_SIZE=1G
    volumes:
      - cassandra_data_2:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra --debug -e 'DESCRIBE KEYSPACES;' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      - cassandra-1
    networks:
      - cassandra_network

  cassandra-3:
    image: cassandra:4.0
    container_name: cassandra-3
    hostname: cassandra-3
    ports:
      - "9044:9042" # CQL Native Transport Port for Node 3
    environment:
      - CASSANDRA_CLUSTER_NAME=DevCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack3
      - CASSANDRA_SEEDS=cassandra-1,cassandra-2,cassandra-3
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_BROADCAST_ADDRESS=cassandra-3
      - CASSANDRA_LISTEN_ADDRESS=auto
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
      - CASSANDRA_BROADCAST_RPC_ADDRESS=127.0.0.1
      - CASSANDRA_START_NATIVE_TRANSPORT=true
      - CASSANDRA_AUTO_BOOTSTRAP=false
      - HEAP_NEWSIZE=256M
      - MAX_HEAP_SIZE=1G
    volumes:
      - cassandra_data_3:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra --debug -e 'DESCRIBE KEYSPACES;' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      - cassandra-1
      - cassandra-2
    networks:
      - cassandra_network

volumes:
  mysql_data:
  #  mongodb_data:
  redis_data:
  cassandra_data_1:
  cassandra_data_2:
  cassandra_data_3:
  shard1_data:
  shard2_data:
  shard3_data:

networks:
  default:
    driver: bridge
  cassandra_network:
    driver: bridge